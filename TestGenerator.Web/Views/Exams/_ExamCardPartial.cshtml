@using Microsoft.AspNetCore.Identity
@using TestGenerator.Model.Entities

@model ExamViewModel

@inject SignInManager<User> SignInManager


<div class="card h-100">
    <div class="card-header h-100">
        <h5 class="card-title">@Model.Name</h5>
        <a class="badge badge-primary" asp-controller="Modules" asp-action="Details" asp-route-id="@Model.Module.ModuleId">@Model.Module.Title</a>
    </div>
    <div class="card-body h-100">
        <p class="card-subtitle card-text">@Model.Description</p>
        <p class="mb-2 text-muted">@Model.QuestionAmount questions</p>

        @if (User.IsInRole("Administrator"))
        {
            <p class="card-text">@Model.AuthorizedAttempts tentatives autorisés</p>
            <a class="btn btn-primary" asp-action="Details" asp-route-id="@Model.ExamId">Details</a>
        }
        else if (@Model.ClosingDate > DateTime.Now && (@Model.AuthorizedAttempts - @Model.UserExamAttempts.Count) > 0)
        {
            <p class="text-muted">@($"{@Model.AuthorizedAttempts - @Model.UserExamAttempts.Count} tentatives restantes ({@Model.AuthorizedAttempts} au total)")</p>
            <a class="btn btn-primary" asp-action="Attempt" asp-route-id="@Model.ExamId">Passer l'examen</a>
        }
        else
        {
            <p class="text-muted">Plus de tentatives disponibles</p>
        }

    </div>
    <div class="card-footer text-muted  h-100">
        <p>
            @if (@Model.ClosingDate > DateTime.Now)
            {
            <p class="text-muted">
                Temps restant :<br />
                @{ TimeSpan ts = @Model.ClosingDate.Subtract(DateTime.Now); }
                @($"{ts.Days} jours, {ts.Hours} heures et {ts.Minutes} minutes")
            </p>
        }
        else
        {
            @($"Date de cloturation : {@Model.ClosingDate:d}")
        }
            </p>
        </div>
    </div>